// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: weather_condition.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getConditionByConditionID = `-- name: GetConditionByConditionID :one
SELECT id, condition_id, main, description, icon FROM weather_conditions 
WHERE condition_id = $1
`

func (q *Queries) GetConditionByConditionID(ctx context.Context, conditionID sql.NullInt32) (WeatherCondition, error) {
	row := q.db.QueryRowContext(ctx, getConditionByConditionID, conditionID)
	var i WeatherCondition
	err := row.Scan(
		&i.ID,
		&i.ConditionID,
		&i.Main,
		&i.Description,
		&i.Icon,
	)
	return i, err
}

const insertCondition = `-- name: InsertCondition :one
INSERT INTO weather_conditions (
    id, condition_id, main, description, icon
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, condition_id, main, description, icon
`

type InsertConditionParams struct {
	ID          uuid.UUID
	ConditionID sql.NullInt32
	Main        sql.NullString
	Description sql.NullString
	Icon        sql.NullString
}

func (q *Queries) InsertCondition(ctx context.Context, arg InsertConditionParams) (WeatherCondition, error) {
	row := q.db.QueryRowContext(ctx, insertCondition,
		arg.ID,
		arg.ConditionID,
		arg.Main,
		arg.Description,
		arg.Icon,
	)
	var i WeatherCondition
	err := row.Scan(
		&i.ID,
		&i.ConditionID,
		&i.Main,
		&i.Description,
		&i.Icon,
	)
	return i, err
}
