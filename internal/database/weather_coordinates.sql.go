// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: weather_coordinates.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getWeatherByID = `-- name: GetWeatherByID :one
SELECT id, lon, lat FROM coordinates WHERE id = $1
`

func (q *Queries) GetWeatherByID(ctx context.Context, id uuid.UUID) (Coordinate, error) {
	row := q.db.QueryRowContext(ctx, getWeatherByID, id)
	var i Coordinate
	err := row.Scan(&i.ID, &i.Lon, &i.Lat)
	return i, err
}

const getWeatherCoord = `-- name: GetWeatherCoord :one
SELECT id, lon, lat FROM coordinates 
WHERE lon = $1 AND lat = $2
`

type GetWeatherCoordParams struct {
	Lon sql.NullFloat64
	Lat sql.NullFloat64
}

func (q *Queries) GetWeatherCoord(ctx context.Context, arg GetWeatherCoordParams) (Coordinate, error) {
	row := q.db.QueryRowContext(ctx, getWeatherCoord, arg.Lon, arg.Lat)
	var i Coordinate
	err := row.Scan(&i.ID, &i.Lon, &i.Lat)
	return i, err
}

const insertWeatherCoordinates = `-- name: InsertWeatherCoordinates :one
INSERT INTO coordinates(id, lon, lat)
VALUES (
    $1,
    $2,
    $3
)
RETURNING id, lon, lat
`

type InsertWeatherCoordinatesParams struct {
	ID  uuid.UUID
	Lon sql.NullFloat64
	Lat sql.NullFloat64
}

func (q *Queries) InsertWeatherCoordinates(ctx context.Context, arg InsertWeatherCoordinatesParams) (Coordinate, error) {
	row := q.db.QueryRowContext(ctx, insertWeatherCoordinates, arg.ID, arg.Lon, arg.Lat)
	var i Coordinate
	err := row.Scan(&i.ID, &i.Lon, &i.Lat)
	return i, err
}
