// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: weather_data.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const insertWeatherDatum = `-- name: InsertWeatherDatum :one
INSERT INTO weather_data (
    id,
    coordinates_id,
    city_name,
    country,
    temperature,
    feels_like,
    temp_min,
    temp_max,
    pressure,
    humidity,
    sea_level,
    grnd_level,
    visibility,
    wind_speed,
    wind_deg,
    cloudiness,
    timestamp,
    sunrise,
    sunset,
    timezone
) VALUES (
    $1,  -- UUID
    $2,  -- coordinates_id (UUID)
    $3,  -- city_name
    $4,  -- country
    $5,  -- temperature
    $6,  -- feels_like
    $7,  -- temp_min
    $8,  -- temp_max
    $9, -- pressure
    $10, -- humidity
    $11, -- sea_level
    $12, -- grnd_level
    $13, -- visibility
    $14, -- wind_speed
    $15, -- wind_deg
    $16, -- cloudiness
    $17, -- timestamp
    $18, -- sunrise
    $19, -- sunset
    $20  -- timezone
)
RETURNING id, coordinates_id, city_name, country, temperature, feels_like, temp_min, temp_max, pressure, humidity, sea_level, grnd_level, visibility, wind_speed, wind_deg, cloudiness, timestamp, sunrise, sunset, timezone
`

type InsertWeatherDatumParams struct {
	ID            uuid.UUID
	CoordinatesID uuid.NullUUID
	CityName      sql.NullString
	Country       sql.NullString
	Temperature   sql.NullFloat64
	FeelsLike     sql.NullFloat64
	TempMin       sql.NullFloat64
	TempMax       sql.NullFloat64
	Pressure      sql.NullInt32
	Humidity      sql.NullInt32
	SeaLevel      sql.NullInt32
	GrndLevel     sql.NullInt32
	Visibility    sql.NullInt32
	WindSpeed     sql.NullFloat64
	WindDeg       sql.NullInt32
	Cloudiness    sql.NullInt32
	Timestamp     sql.NullTime
	Sunrise       sql.NullTime
	Sunset        sql.NullTime
	Timezone      sql.NullInt32
}

func (q *Queries) InsertWeatherDatum(ctx context.Context, arg InsertWeatherDatumParams) (WeatherDatum, error) {
	row := q.db.QueryRowContext(ctx, insertWeatherDatum,
		arg.ID,
		arg.CoordinatesID,
		arg.CityName,
		arg.Country,
		arg.Temperature,
		arg.FeelsLike,
		arg.TempMin,
		arg.TempMax,
		arg.Pressure,
		arg.Humidity,
		arg.SeaLevel,
		arg.GrndLevel,
		arg.Visibility,
		arg.WindSpeed,
		arg.WindDeg,
		arg.Cloudiness,
		arg.Timestamp,
		arg.Sunrise,
		arg.Sunset,
		arg.Timezone,
	)
	var i WeatherDatum
	err := row.Scan(
		&i.ID,
		&i.CoordinatesID,
		&i.CityName,
		&i.Country,
		&i.Temperature,
		&i.FeelsLike,
		&i.TempMin,
		&i.TempMax,
		&i.Pressure,
		&i.Humidity,
		&i.SeaLevel,
		&i.GrndLevel,
		&i.Visibility,
		&i.WindSpeed,
		&i.WindDeg,
		&i.Cloudiness,
		&i.Timestamp,
		&i.Sunrise,
		&i.Sunset,
		&i.Timezone,
	)
	return i, err
}
